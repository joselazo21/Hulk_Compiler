%{
#include "SintacticoBison.tab.hpp"
#include <stdlib.h>
#include <string.h>
#include <stdio.h>

// Declaración de la variable de columna
int yycolumn = 1;

// Macro para actualizar la ubicación
#define YY_USER_ACTION \
    yylloc.first_line = yylloc.last_line = yylineno; \
    yylloc.first_column = yycolumn; \
    yylloc.last_column = yycolumn + yyleng; \
    yycolumn += yyleng;
%}

%option noyywrap
%option yylineno

DIGIT   [0-9]+
NUMBER  [0-9]+(\.[0-9]+)?
ID      [a-zA-Z_][a-zA-Z_0-9]*
STRING  \"([^\\\"]|\\.)*\"
WHITESPACE [ \t\r]+

%%

\n              { yycolumn = 1; /* Reset column counter on newline */ }
{WHITESPACE}    { /* ignorar espacios en blanco */ }

":="            { printf("<ASSIGN>\n"); return ASSIGN; }  // Add this line before "="
"="             { printf("<ASSIGN>\n"); return ASSIGN; }  // Keep the original "="
"let"           { printf("<LET>\n"); return LET; }
"print"         { printf("<PRINT>\n"); return PRINT; }
"function"      { printf("<FUNCTION>\n"); return FUNCTION; }
"if"            { printf("<IF>\n"); return IF; }
"else"          { printf("<ELSE>\n"); return ELSE; }
"=>"            { printf("<ARROW>\n"); return ARROW; }
"elif"          { printf("<ELIF>\n"); return ELIF; }
"while"         { printf("<WHILE>\n"); return WHILE; }
"for"           { printf("<FOR>\n"); return FOR; }
"in"            { printf("<IN>\n"); return IN; }
"type"          { printf("<TYPE>\n"); return TYPE; }
"inherits"      { printf("<INHERITS>\n"); return INHERITS; }
"new"           { printf("<NEW>\n"); return NEW; }
"self"          { printf("<SELF>\n"); return SELF; }
"base"          { printf("<BASE>\n"); return BASE; }
"is"            { printf("<IS>\n"); return IS; }
"as"            { printf("<AS>\n"); return AS; }

":"             { printf("<COLON>\n"); return ':'; }
"=="            { printf("<EQ>\n"); return EQ; }
"!="            { printf("<NEQ>\n"); return NEQ; }
"<="            { printf("<LE>\n"); return LE; }
">="            { printf("<GE>\n"); return GE; }
"<"             { printf("<LT>\n"); return '<'; }
">"             { printf("<GT>\n"); return '>'; }
"%"             { printf("<MOD>\n"); return '%'; }
"&&"            { printf("<AND>\n"); return AND; }
"||"            { printf("<OR>\n"); return OR; }

{NUMBER}        { printf("<NUMBER:%s>\n", yytext); yylval.dval = atof(yytext); return NUMBER; }
{ID}            { printf("<ID:%s>\n", yytext); yylval.sval = strdup(yytext); return ID; }
{STRING}        { 
                    char* str = strdup(yytext + 1); // skip first "
                    str[strlen(str)-1] = '\0'; // remove last "
                    printf("<STRING:%s>\n", str);
                    yylval.sval = str;
                    return STRING; 
                }
","             { printf("<COMMA>\n"); return ','; }
";"             { printf("<SEMICOLON>\n"); return ';'; }
"+"             { printf("<PLUS>\n"); return '+'; }
"-"             { printf("<MINUS>\n"); return '-'; }
"^"             { printf("<POW>\n"); return '^'; }
"*"             { printf("<MULT>\n"); return '*'; }
"/"             { printf("<DIV>\n"); return '/'; }
"@@"            { printf("<CONCAT_WS>\n"); return CONCAT_WS; }
"@"             { printf("<CONCAT>\n"); return CONCAT; }
"("             { printf("<LPAREN>\n"); return '('; }
")"             { printf("<RPAREN>\n"); return ')'; }
"{"             { printf("<LBRACE>\n"); return '{'; }
"}"             { printf("<RBRACE>\n"); return '}'; }
"."             { printf("<DOT>\n"); return '.'; }
"["             { printf("<LBRACKET>\n"); return '['; }
"]"             { printf("<RBRACKET>\n"); return ']'; }
"|"             { printf("<PIPE>\n"); return '|'; }
.               { 
                    printf("Error: Carácter no reconocido '%s' en línea %d, columna %d\n", 
                           yytext, yylineno, yylloc.first_column);
                }

%%
