function operate(x: Number , y: Number) : Number {
    print(x + y);
    print(x - y);
    print(x * y);
    print(x / y);
}

operate(3.2, 4.2);

type Point (x,y)  {
    x : Number = x ;
    y : Number = y ;

    getX() : Number => self.x;
    getY() : Number => self.y;

    setX(x) : Number => self.x := x;
    setY(y) : Number => self.y := y;
}

let pt = new Point(3,4) in
    print("x: " @ pt.getX() @ "; y: " @ pt.getY());

type PolarPoint inherits Point {
    rho() => sqrt(self.getX() ^ 2 + self.getY() ^ 2);

}

let pt = new PolarPoint(3,4) in
    print("rho: " @ pt.rho());


type Person(firstname, lastname) {
    firstname : String = firstname;
    lastname : String = lastname;

    name() : String => self.firstname @@ " " @@ self.lastname;
}

type Knight inherits Person {
    name() : String => "Sir" @@ base();
}

let p = new Knight("Phil", "Collins") in
    print(p.name()); 

type Bird {
    x : Number = 3;
}

type Plane {
    x : Number = 3;
}

type Superman {
    x : Number = 3;     
}

let x = 5 in
    print(
        if (x is Bird) "It's bird!"
        elif (x is Number) "It's a number!"
        else "No, it's Superman!"
    );

type A {
   a : Number = 3;
}

type B inherits A {
    a : Number = 3;
}

type C inherits A {
    a : Number = 3;
}

let x : A = if (rand() < 0.5) new B() else new C() in
    if (x is B)
        let y : B = x as B in {
            print("you can use y with static type B");
        }
    else {
        print("x is not B");
    };